import asyncio, os, sqlite3, json, re
from datetime import datetime, timedelta
from collections import defaultdict

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    Message, LabeledPrice, PreCheckoutQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from dotenv import load_dotenv
import logging

from database import DatabaseManager, init_database
from rate_limiter import RateLimiter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# ----------------- ENV -----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
PAY_PROVIDER_TOKEN = os.getenv("PAY_PROVIDER_TOKEN", "")  # –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—à—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ----------------- DB ------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
DB_PATH = "vp_masters.sqlite"
db = DatabaseManager(DB_PATH)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–∏–º–∏—Ç–µ—Ä–∞
rate_limiter = RateLimiter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
init_database(db)

# ----------------- PRICING -------------
SUB_PRICE_RUB = 99000         # 990 ‚ÇΩ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
PRIORITY_PRICE_RUB = 49000    # 490 ‚ÇΩ/–º–µ—Å
PIN_PRICE_RUB = 19000         # 190 ‚ÇΩ/–Ω–µ–¥

FREE_ORDERS_START = 3
SUB_DURATION_DAYS = 30
PRIORITY_DURATION_DAYS = 30
PIN_DURATION_DAYS = 7

# ----------------- CATEGORIES ----------
CATS = [
    ("üõ† –†–µ–º–æ–Ω—Ç", "remont"),
    ("üßπ –£–±–æ—Ä–∫–∞", "uborka"),
    ("üöö –ü–µ—Ä–µ–µ–∑–¥", "pereezd"),
    ("üíÖ –ö—Ä–∞—Å–æ—Ç–∞", "krasota"),
    ("üë∂ –ü–µ—Ä—Å–æ–Ω–∞–ª", "person"),
]

def categories_kb():
    rows = [[InlineKeyboardButton(text=t, callback_data=f"cat:{c}")] for t, c in CATS]
    rows.append([InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="go:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def share_phone_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )

def cancel_text_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ----------------- STATES --------------
class Req(StatesGroup):
    name = State()
    contact = State()
    category = State()
    district = State()
    desc = State()
    when = State()
    preview = State()

class MasterForm(StatesGroup):
    fio = State()
    phone = State()
    categories = State()
    exp_bucket = State()
    exp_text = State()
    portfolio = State()
    references = State()
    verify_offer = State()
    consent = State()
    passport_info = State()
    passport_scan = State()
    face_photo = State()
    npd_offer = State()
    inn_cert = State()
    npd_doc = State()
    finalize = State()

class Complaint(StatesGroup):
    who = State()
    order_id = State()
    master_id = State()
    text = State()

# ----------------- HELPERS -------------
def is_active(until_str: str | None) -> bool:
    if not until_str: return False
    try:
        return datetime.utcnow() < datetime.strptime(until_str, "%Y-%m-%d %H:%M:%S")
    except:
        return False

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not ADMIN_CHAT_ID or ADMIN_CHAT_ID == 0:
        return False
    return str(user_id) == str(ADMIN_CHAT_ID)

async def notify_admin(text: str):
    if not ADMIN_CHAT_ID: return
    try:
        await bot.send_message(ADMIN_CHAT_ID, text)
    except Exception as e:
        logging.error(f"[ADMIN_NOTIFY_ERROR] {e}")

async def safe_cleanup_documents():
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logging.info("[CLEANUP] Starting document cleanup...")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤)
        masters_to_clean = db.fetch_all("""
            SELECT id, fio, level, contact, phone,
                   passport_scan_file_id, face_photo_file_id, npd_ip_doc_file_id,
                   datetime(created_at) as created_time
            FROM masters 
            WHERE created_at < datetime('now', '-72 hours')
              AND (passport_scan_file_id IS NOT NULL 
                   OR face_photo_file_id IS NOT NULL 
                   OR npd_ip_doc_file_id IS NOT NULL)
        """)
        
        if not masters_to_clean:
            logging.info("[CLEANUP] No documents to clean")
            return
        
        cleaned_count = 0
        cleanup_details = []
        
        for master in masters_to_clean:
            try:
                master_id = master['id']
                master_fio = master['fio'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                master_level = master['level'] or '–ö–∞–Ω–¥–∏–¥–∞—Ç'
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
                files_to_remove = []
                if master['passport_scan_file_id']:
                    files_to_remove.append("–ø–∞—Å–ø–æ—Ä—Ç")
                if master['face_photo_file_id']:
                    files_to_remove.append("—Ñ–æ—Ç–æ –ª–∏—Ü–∞")
                if master['npd_ip_doc_file_id']:
                    files_to_remove.append("–¥–æ–∫—É–º–µ–Ω—Ç –ù–ü–î/–ò–ü")
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ë–î
                db.execute("""
                    UPDATE masters 
                    SET passport_scan_file_id = NULL,
                        face_photo_file_id = NULL,
                        npd_ip_doc_file_id = NULL
                    WHERE id = ?
                """, (master_id,))
                
                cleaned_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ç–∞–ª–∏ –æ—á–∏—Å—Ç–∫–∏
                cleanup_details.append(
                    f"#{master_id} {master_fio} ({master_level}): {', '.join(files_to_remove)}"
                )
                
                logging.info(f"[DOC_CLEANED] Master #{master_id} - removed: {', '.join(files_to_remove)}")
                
            except Exception as e:
                logging.error(f"[DOC_CLEAN_ERROR] Master #{master.get('id', 'unknown')}: {e}")
                cleanup_details.append(f"#{master.get('id', 'unknown')} - –û–®–ò–ë–ö–ê: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
        if cleaned_count > 0 and ADMIN_CHAT_ID:
            report_lines = [
                "üßπ <b>–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>",
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {cleaned_count}",
                "",
                "<b>–î–µ—Ç–∞–ª–∏ –æ—á–∏—Å—Ç–∫–∏:</b>"
            ]
            report_lines.extend(cleanup_details[:10])  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            
            if len(cleanup_details) > 10:
                report_lines.append(f"... –∏ –µ—â–µ {len(cleanup_details) - 10} –º–∞—Å—Ç–µ—Ä–æ–≤")
            
            report_lines.extend([
                "",
                f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã"
            ])
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            report_text = "\n".join(report_lines)
            if len(report_text) > 4000:
                report_text = "\n".join(report_lines[:8] + ["...", "üí° –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã"])
            
            try:
                await bot.send_message(ADMIN_CHAT_ID, report_text)
            except Exception as e:
                logging.error(f"[CLEANUP_REPORT_ERROR] {e}")
        
        logging.info(f"[CLEANUP] Documents cleaned for {cleaned_count} masters")
        
    except Exception as e:
        logging.error(f"[CLEANUP_ERROR] Global error: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
        if ADMIN_CHAT_ID:
            try:
                await bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)[:500]}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
            except Exception as notify_error:
                logging.error(f"[CLEANUP_NOTIFY_ERROR] {notify_error}")

def calc_skill_tier(master_id: int) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        master = db.fetch_one("SELECT orders_completed FROM masters WHERE id = ?", (master_id,))
        if not master:
            return "–ù–æ–≤–∏—á–æ–∫"
            
        orders_completed = master['orders_completed'] or 0
        
        if orders_completed < 20:
            return "–ù–æ–≤–∏—á–æ–∫"
        elif orders_completed < 50:
            return "–ú–∞—Å—Ç–µ—Ä"
        else:
            return "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
    except Exception as e:
        logging.error(f"[CALC_SKILL_TIER_ERROR] {e}")
        return "–ù–æ–≤–∏—á–æ–∫"

def exp_bucket_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¥–æ 1 –≥–æ–¥–∞", callback_data="exp:<=1")],
        [InlineKeyboardButton(text="1‚Äì3 –≥–æ–¥–∞", callback_data="exp:1-3")],
        [InlineKeyboardButton(text="3‚Äì5 –ª–µ—Ç", callback_data="exp:3-5")],
        [InlineKeyboardButton(text="5‚Äì10 –ª–µ—Ç", callback_data="exp:5-10")],
        [InlineKeyboardButton(text="–±–æ–ª–µ–µ 10 –ª–µ—Ç", callback_data="exp:>10")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="master:cancel")]
    ])

def admin_master_card(mid: int) -> str:
    row = db.fetch_one("""
        SELECT fio, contact, phone, level, verified, has_npd_ip, categories_auto,
               exp_bucket, exp_text, portfolio, inn
        FROM masters WHERE id=?
    """, (mid,))
    if not row:
        return f"–ú–∞—Å—Ç–µ—Ä #{mid} ‚Äî –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á–∞–º (row_factory = sqlite3.Row)
    fio = row['fio'] or '‚Äî'
    contact = row['contact'] or '‚Äî'
    phone = row['phone'] or '‚Äî'
    level = row['level'] or '‚Äî'
    verified = row['verified'] or '‚Äî'
    has_npd_ip = row['has_npd_ip'] or '‚Äî'
    cats_auto = row['categories_auto'] or '‚Äî'
    exp_bucket = row['exp_bucket'] or '‚Äî'
    exp_text = row['exp_text'] or '‚Äî'
    portfolio = row['portfolio'] or '‚Äî'
    inn = row['inn'] or '‚Äî'
    
    verified_txt = "–î–∞" if verified else "–ù–µ—Ç"
    npd_txt = "–î–∞" if has_npd_ip else "–ù–µ—Ç"
    return (
        f"üßæ –ê–Ω–∫–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞ #{mid}\n"
        f"üë§ {fio or '‚Äî'}\n"
        f"üÜî uid: {contact or '‚Äî'}\n"
        f"üìû {phone or '‚Äî'}\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: {level or '‚Äî'}\n"
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π: {verified_txt} | –ù–ü–î/–ò–ü: {npd_txt}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è(–∏–∏): {cats_auto or '‚Äî'}\n"
        f"üõ† –û–ø—ã—Ç: {exp_bucket or '‚Äî'}\n"
        f"üìù –ù–∞–≤—ã–∫–∏: {exp_text or '‚Äî'}\n"
        f"üìö –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {portfolio or '‚Äî'}\n"
        f"üßæ –ò–ù–ù: {inn or '‚Äî'}"
    )

MASTER_CATS = ["–†–µ–º–æ–Ω—Ç", "–£–±–æ—Ä–∫–∞", "–ü–µ—Ä–µ–µ–∑–¥", "–ö—Ä–∞—Å–æ—Ç–∞", "–ü–µ—Ä—Å–æ–Ω–∞–ª", "–î—Ä—É–≥–æ–µ"]

def build_cats_kb(selected: list[str]) -> InlineKeyboardMarkup:
    """
    –†–∏—Å—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ (‚úì) –∏ –∫–Ω–æ–ø–∫–æ–π –ì–æ—Ç–æ–≤–æ (–∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ 1‚Äì2 –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö).
    """
    rows = []
    for title in MASTER_CATS:
        mark = "‚úì " if title in selected else ""
        rows.append([InlineKeyboardButton(text=f"{mark}{title}", callback_data=f"mcat:toggle:{title}")])
    # –ö–Ω–æ–ø–∫–∞ –ì–æ—Ç–æ–≤–æ
    done_enabled = 1 <= len(selected) <= 2
    rows.append([InlineKeyboardButton(
        text=f"–ì–æ—Ç–æ–≤–æ ({len(selected)}/2)" + ("" if done_enabled else " ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ 1‚Äì2"),
        callback_data="mcat:done"
    )])
    # –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="master:cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)
    
async def request_review(request_id: int, master_id: int, client_id: str):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ review_requested
        request_data = db.fetch_one(
            "SELECT review_requested FROM requests WHERE id = ?", 
            (request_id,)
        )
        if request_data and request_data['review_requested']:
            logging.info(f"[REVIEW] Review already requested for request #{request_id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
        existing_review = db.fetch_one(
            "SELECT id FROM reviews WHERE request_id = ?", 
            (request_id,)
        )
        
        if existing_review:
            logging.info(f"[REVIEW] Review already exists for request #{request_id}")
            return
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –∑–∞–ø—Ä–æ—à–µ–Ω
        db.execute(
            "UPDATE requests SET review_requested = 1 WHERE id = ?", 
            (request_id,)
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠ê 1", callback_data=f"review:{request_id}:1"),
                InlineKeyboardButton(text="‚≠ê 2", callback_data=f"review:{request_id}:2"), 
                InlineKeyboardButton(text="‚≠ê 3", callback_data=f"review:{request_id}:3"),
                InlineKeyboardButton(text="‚≠ê 4", callback_data=f"review:{request_id}:4"),
                InlineKeyboardButton(text="‚≠ê 5", callback_data=f"review:{request_id}:5")
            ],
            [
                InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_text:{request_id}"),
                InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"review_skip:{request_id}")
            ]
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        master_info = db.fetch_one(
            "SELECT fio FROM masters WHERE id = ?", 
            (master_id,)
        )
        master_name = master_info['fio'] if master_info else "–º–∞—Å—Ç–µ—Ä"
        
        await bot.send_message(
            client_id,
            f"üìù <b>–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É {master_name}</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏:",
            reply_markup=kb
        )
        
        logging.info(f"[REVIEW] Review requested for request #{request_id}")
        
    except Exception as e:
        logging.error(f"[REVIEW_REQUEST_ERROR] {e}")

async def update_master_stats(master_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        stats = db.fetch_one("""
            SELECT 
                AVG(rating) as avg_rating,
                COUNT(*) as reviews_count,
                COUNT(CASE WHEN rating = 5 THEN 1 END) as five_stars,
                COUNT(CASE WHEN rating = 4 THEN 1 END) as four_stars, 
                COUNT(CASE WHEN rating = 3 THEN 1 END) as three_stars,
                COUNT(CASE WHEN rating = 2 THEN 1 END) as two_stars,
                COUNT(CASE WHEN rating = 1 THEN 1 END) as one_stars
            FROM reviews 
            WHERE master_id = ?
        """, (master_id,))
        
        if stats and stats['reviews_count'] > 0:
            avg_rating = round(stats['avg_rating'], 1)
            reviews_count = stats['reviews_count']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –º–∞—Å—Ç–µ—Ä–∞
            db.execute("""
                UPDATE masters 
                SET avg_rating = ?, reviews_count = ?
                WHERE id = ?
            """, (avg_rating, reviews_count, master_id))
            
            logging.info(f"[MASTER_STATS] Updated master #{master_id}: rating={avg_rating}, reviews={reviews_count}")
        
    except Exception as e:
        logging.error(f"[MASTER_STATS_ERROR] {e}")

def get_rating_stars(rating: float) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    full_stars = int(rating)
    half_star = rating - full_stars >= 0.5
    empty_stars = 5 - full_stars - (1 if half_star else 0)
    
    stars = "‚≠ê" * full_stars
    if half_star:
        stars += "‚ú®"
    stars += "‚òÜ" * empty_stars
    
    return stars

async def mark_request_completed(request_id: int):
    """–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        request = db.fetch_one("""
            SELECT id, master_id, contact, client_user_id, status 
            FROM requests 
            WHERE id = ?
        """, (request_id,))
        
        if not request:
            logging.error(f"[COMPLETE_REQUEST] Request #{request_id} not found")
            return False
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        db.execute("""
            UPDATE requests 
            SET status = 'completed', completed_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (request_id,))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º client_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
        client_id = request['client_user_id'] if request['client_user_id'] else request['contact']
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤ —É –∫–ª–∏–µ–Ω—Ç–∞
        await request_review(
            request_id=request_id,
            master_id=request['master_id'],
            client_id=client_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É –º–∞—Å—Ç–µ—Ä–∞
        db.execute("""
            UPDATE masters 
            SET orders_completed = orders_completed + 1,
                skill_tier = ?
            WHERE id = ?
        """, (calc_skill_tier(request['master_id']), request['master_id']))
        
        logging.info(f"[COMPLETE_REQUEST] Request #{request_id} marked as completed")
        return True
        
    except Exception as e:
        logging.error(f"[COMPLETE_REQUEST_ERROR] {e}")
        return False

# ----------------- UI ------------------
def main_menu_kb(user_id: str = None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)"""
    docs_url = "https://disk.yandex.ru/d/1mlvS2VtcJTiXg"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
    is_master = False
    if user_id:
        master = db.fetch_one("SELECT id FROM masters WHERE contact = ?", (user_id,))
        is_master = master is not None
    
    buttons = []
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ó–∞—è–≤–∫–∞ + (–°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º –ò–õ–ò –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç)
    if is_master:
        # –î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤: –ó–∞—è–≤–∫–∞ + –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        buttons.append([
            InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="go:req"),
            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="master:cabinet")
        ])
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ó–∞—è–≤–∫–∞ + –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º
        buttons.append([
            InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="go:req"),
            InlineKeyboardButton(text="üë®‚Äçüîß –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º", callback_data="go:master")
        ])
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç—ã + –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è
    buttons.append([
        InlineKeyboardButton(text="üìî –î–æ–∫—É–º–µ–Ω—Ç—ã", url=docs_url),
        InlineKeyboardButton(text="üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="go:complaint")
    ])
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –¢–û–õ–¨–ö–û –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    if is_master:
        buttons.append([
            InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ —É—Å–ª—É–≥–∏", callback_data="go:billing")
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ----------------- MASTER COMMON FUNCTIONS --------
async def get_master_cabinet_data(user_id: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
    master = db.fetch_one("""
        SELECT id, fio, phone, level, categories_auto,
               avg_rating, reviews_count, orders_completed, skill_tier,
               free_orders_left, sub_until, priority_until, pin_until
        FROM masters
        WHERE contact = ?
    """, (user_id,))

    if not master:
        return None

    # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_emoji = {
        "–ö–∞–Ω–¥–∏–¥–∞—Ç": "üü°",
        "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π": "üü¢",
        "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": "üíé"
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    sub_active = is_active(master['sub_until'])
    priority_active = is_active(master['priority_until'])
    pin_active = is_active(master['pin_until'])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    def format_date(date_str):
        if not date_str:
            return "‚Äî"
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            return dt.strftime("%d.%m.%Y")
        except:
            return "‚Äî"

    sub_status = f"‚úÖ –¥–æ {format_date(master['sub_until'])}" if sub_active else "‚ùå –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    priority_status = f"‚ö° –¥–æ {format_date(master['priority_until'])}" if priority_active else "‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    pin_status = f"üìå –¥–æ {format_date(master['pin_until'])}" if pin_active else "‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"{status_emoji.get(master['level'], '‚ö™')} <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞</b>\n\n"
        f"üë§ <b>{master['fio']}</b>\n"
        f"üìû {master['phone'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÇ {master['categories_auto'] or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: {master['level']}\n"
        f"üéØ –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: {master['skill_tier']}\n\n"
        f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {master['orders_completed']}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {master['avg_rating']:.1f}/5.0\n"
        f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {master['reviews_count']}\n\n"
        f"üí∞ <b>–ü–û–î–ü–ò–°–ö–ò:</b>\n"
        f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {master['free_orders_left']}/3\n"
        f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}\n"
        f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_status}\n"
        f"üìå –ó–∞–∫—Ä–µ–ø: {pin_status}"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="master:orders"),
            InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="master:reviews")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="master:stats"),
            InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="go:billing")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
    ])

    return {"text": text, "keyboard": kb}

async def get_master_reviews_data(user_id: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        master = db.fetch_one("SELECT id, fio FROM masters WHERE contact = ?", (user_id,))

        if not master:
            return None

        master_id = master['id']
        master_fio = master['fio']

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db.fetch_one("""
            SELECT
                COUNT(*) as reviews_count,
                AVG(rating) as avg_rating,
                COUNT(CASE WHEN rating = 5 THEN 1 END) as five_stars,
                COUNT(CASE WHEN rating = 4 THEN 1 END) as four_stars,
                COUNT(CASE WHEN rating = 3 THEN 1 END) as three_stars,
                COUNT(CASE WHEN rating = 2 THEN 1 END) as two_stars,
                COUNT(CASE WHEN rating = 1 THEN 1 END) as one_stars
            FROM reviews
            WHERE master_id = ?
        """, (master_id,))

        if not stats or stats['reviews_count'] == 0:
            return {"text": "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", "keyboard": None}

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        reviews = db.fetch_all("""
            SELECT r.rating, r.comment, r.created_at, r.request_id
            FROM reviews r
            WHERE r.master_id = ?
            ORDER BY r.created_at DESC
            LIMIT 10
        """, (master_id,))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text_lines = [f"‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞ {master_fio}</b>\n"]

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text_lines.append(f"üìä <b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/5.0</b> ({stats['reviews_count']} –æ—Ç–∑—ã–≤–æ–≤)\n")

        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∑–≤—ë–∑–¥–∞–º
        text_lines.append("<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>")
        total = stats['reviews_count']
        text_lines.append(f"‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê {stats['five_stars']} ({stats['five_stars']/total*100:.0f}%)")
        text_lines.append(f"‚≠ê‚≠ê‚≠ê‚≠ê {stats['four_stars']} ({stats['four_stars']/total*100:.0f}%)")
        text_lines.append(f"‚≠ê‚≠ê‚≠ê {stats['three_stars']} ({stats['three_stars']/total*100:.0f}%)")
        if stats['two_stars'] > 0:
            text_lines.append(f"‚≠ê‚≠ê {stats['two_stars']} ({stats['two_stars']/total*100:.0f}%)")
        if stats['one_stars'] > 0:
            text_lines.append(f"‚≠ê {stats['one_stars']} ({stats['one_stars']/total*100:.0f}%)")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        text_lines.append(f"\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>")

        for i, review in enumerate(reviews[:5], 1):
            stars = get_rating_stars(review['rating'])
            date = datetime.fromisoformat(review['created_at']).strftime('%d.%m.%Y')

            text_lines.append(f"\n{i}. {stars} <i>({date})</i>")
            if review['comment']:
                comment = review['comment']
                if len(comment) > 150:
                    comment = comment[:150] + "..."
                text_lines.append(f"   üí¨ ¬´{comment}¬ª")

        if len(reviews) > 5:
            text_lines.append(f"\n... –∏ –µ—â—ë {len(reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤")

        return {"text": "\n".join(text_lines), "keyboard": None}

    except Exception as e:
        logging.error(f"[GET_MASTER_REVIEWS_ERROR] {e}")
        return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤"}

async def get_master_stats_data(user_id: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        master = db.fetch_one("""
            SELECT id, fio, created_at, orders_completed, avg_rating, reviews_count, skill_tier
            FROM masters
            WHERE contact = ?
        """, (user_id,))

        if not master:
            return None

        master_id = master['id']

        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        active_orders = db.fetch_one("""
            SELECT COUNT(*) as count
            FROM requests
            WHERE master_id = ? AND status = 'assigned'
        """, (master_id,))['count']

        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        skipped_orders = db.fetch_one("""
            SELECT COUNT(*) as count
            FROM offers
            WHERE master_id = ? AND status = 'skipped'
        """, (master_id,))['count']

        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        accepted_offers = db.fetch_one("""
            SELECT COUNT(*) as count
            FROM offers
            WHERE master_id = ? AND status = 'accepted'
        """, (master_id,))['count']

        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = datetime.fromisoformat(master['created_at']).strftime('%d.%m.%Y')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text_lines = [
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ {master['fio']}</b>\n",
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}",
            f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:</b> {master['skill_tier']}\n",

            "<b>üìà –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í:</b>",
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {master['orders_completed']}",
            f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {active_orders}",
            f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_orders}",
            f"üì• –ü—Ä–∏–Ω—è—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {accepted_offers}\n",

            "<b>‚≠ê –†–ï–ô–¢–ò–ù–ì –ò –û–¢–ó–´–í–´:</b>",
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {master['avg_rating']:.1f}/5.0",
            f"üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {master['reviews_count']}"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤
        total_offers = accepted_offers + skipped_orders
        if total_offers > 0:
            accept_rate = (accepted_offers / total_offers) * 100
            text_lines.append(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: {accept_rate:.0f}%")

        return {"text": "\n".join(text_lines), "keyboard": None}

    except Exception as e:
        logging.error(f"[GET_MASTER_STATS_ERROR] {e}")
        return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}

async def get_master_orders_data(user_id: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞
        master = db.fetch_one("SELECT id, fio FROM masters WHERE contact = ?", (user_id,))

        if not master:
            return None

        master_id = master['id']

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        active = db.fetch_all("""
            SELECT id, category, district, when_text, status
            FROM requests
            WHERE master_id = ? AND status IN ('assigned', 'pending_confirmation')
            ORDER BY created_at DESC
        """, (master_id,))

        # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        completed = db.fetch_all("""
            SELECT r.id, r.category, r.completed_at, rev.rating
            FROM requests r
            LEFT JOIN reviews rev ON r.id = rev.request_id
            WHERE r.master_id = ? AND r.status = 'completed'
            ORDER BY r.completed_at DESC
            LIMIT 10
        """, (master_id,))

        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        skipped = db.fetch_all("""
            SELECT req.id, req.category, o.created_at
            FROM offers o
            JOIN requests req ON o.request_id = req.id
            WHERE o.master_id = ? AND o.status = 'skipped'
            ORDER BY o.created_at DESC
            LIMIT 5
        """, (master_id,))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text_lines = [f"üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n"]

        # –ê–∫—Ç–∏–≤–Ω—ã–µ
        if active:
            text_lines.append(f"üü¢ <b>–ê–ö–¢–ò–í–ù–´–ï ({len(active)}):</b>")
            for order in active:
                status_text = "‚è≥ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if order['status'] == 'pending_confirmation' else "–≤ —Ä–∞–±–æ—Ç–µ"
                text_lines.append(
                    f"  #{order['id']} | {order['category']} | {status_text}\n"
                    f"  üìç {order['district']}\n"
                    f"  üóì {order['when_text']}"
                )
            text_lines.append("")
        else:
            text_lines.append("üü¢ <b>–ê–ö–¢–ò–í–ù–´–ï:</b> –Ω–µ—Ç\n")

        # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
        if completed:
            text_lines.append(f"‚úÖ <b>–ó–ê–í–ï–†–®–Å–ù–ù–´–ï ({len(completed)}):</b>")
            for order in completed[:5]:
                date = datetime.fromisoformat(order['completed_at']).strftime('%d.%m.%Y')
                rating_text = f"‚≠ê {order['rating']}" if order['rating'] else "–±–µ–∑ –æ—Ç–∑—ã–≤–∞"
                text_lines.append(f"  #{order['id']} | {order['category']} | {date} | {rating_text}")

            if len(completed) > 5:
                text_lines.append(f"  ... –∏ –µ—â—ë {len(completed) - 5} –∑–∞–∫–∞–∑–æ–≤")
            text_lines.append("")
        else:
            text_lines.append("‚úÖ <b>–ó–ê–í–ï–†–®–Å–ù–ù–´–ï:</b> –Ω–µ—Ç\n")

        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
        if skipped:
            text_lines.append(f"‚è≠ <b>–ü–†–û–ü–£–©–ï–ù–ù–´–ï ({len(skipped)}):</b>")
            for order in skipped[:3]:
                date = datetime.fromisoformat(order['created_at']).strftime('%d.%m.%Y')
                text_lines.append(f"  #{order['id']} | {order['category']} | {date}")

            if len(skipped) > 3:
                text_lines.append(f"  ... –∏ –µ—â—ë {len(skipped) - 3} –∑–∞–∫–∞–∑–æ–≤")

        return {"text": "\n".join(text_lines), "keyboard": None}

    except Exception as e:
        logging.error(f"[GET_MASTER_ORDERS_ERROR] {e}")
        return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤"}

# ----------------- START / MENU --------
@dp.message(CommandStart())
async def start(m: Message):
    user_id = m.from_user.id
    
    # –õ–∏–º–∏—Ç: 10 –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞ –≤ —á–∞—Å
    if not rate_limiter.check_limit(user_id, "start_command", 10, 3600):
        remaining_time = rate_limiter.get_time_until_reset(user_id, "start_command", 3600)
        hours = remaining_time // 3600
        minutes = (remaining_time % 3600) // 60
        
        time_msg = f"{minutes} –º–∏–Ω—É—Ç" if hours == 0 else f"{hours} —á–∞—Å {minutes} –º–∏–Ω—É—Ç"
        await m.answer(
            f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_msg}.",
            reply_markup=main_menu_kb(str(c.from_user.id))
        )
        return
    
    await m.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ú–∞—Å—Ç–µ—Ä–∞ –í–µ—Ä—Ö–Ω–µ–π –ü—ã—à–º—ã¬ª!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞\n"
        "‚Ä¢ –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã\n\n"
        "üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href='https://disk.yandex.ru/d/1mlvS2VtcJTiXg'>–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</a> –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.",
        reply_markup=main_menu_kb(str(user_id)),
        disable_web_page_preview=True
    )

@dp.message(Command("menu"))
async def menu(m: Message):
    await start(m)

@dp.callback_query(F.data.startswith("go:"))
async def go_router(c: CallbackQuery, state: FSMContext):
    await state.clear()
    action = c.data.split(":")[1]
    user_id = c.from_user.id
    
    if action == "req":
        # –õ–∏–º–∏—Ç: 3 –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Å
        if not rate_limiter.check_limit(user_id, "new_request", 3, 3600):
            remaining = rate_limiter.get_remaining(user_id, "new_request", 3, 3600)
            remaining_time = rate_limiter.get_time_until_reset(user_id, "new_request", 3600)
            
            if remaining_time > 0:
                minutes = (remaining_time % 3600) // 60
                await c.answer(
                    f"‚ùå –õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {minutes} –º–∏–Ω—É—Ç.\n"
                    f"üí° –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: {remaining} –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞",
                    show_alert=True
                )
            else:
                await c.answer(f"‚ùå –õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: {remaining} –∑–∞—è–≤–æ–∫", show_alert=True)
            return
        
        await c.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(Req.name)
        
    elif action == "master":
        # –õ–∏–º–∏—Ç: 3 –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞ 24 —á–∞—Å–∞
        if not rate_limiter.check_limit(user_id, "master_registration", 3, 86400):
            remaining_time = rate_limiter.get_time_until_reset(user_id, "master_registration", 86400)
            hours = remaining_time // 10800
            
            await c.answer(
                f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–∞ 3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤.",
                show_alert=True
            )
            return
        
        await c.message.answer("–ê–Ω–∫–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:")
        await state.set_state(MasterForm.fio)
        
    elif action == "complaint":
        # –õ–∏–º–∏—Ç: 5 –∂–∞–ª–æ–± –≤ —Å—É—Ç–∫–∏
        if not rate_limiter.check_limit(user_id, "complaint", 5, 86400):
            remaining = rate_limiter.get_remaining(user_id, "complaint", 5, 86400)
            remaining_time = rate_limiter.get_time_until_reset(user_id, "complaint", 86400)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
            hours = remaining_time // 3600
            minutes = (remaining_time % 3600) // 60
            
            if hours > 0:
                time_msg = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
            else:
                time_msg = f"{minutes} –º–∏–Ω—É—Ç"
            
            await c.answer(
                f"‚ùå –õ–∏–º–∏—Ç –∂–∞–ª–æ–± –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                f"üí° –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {remaining} –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ {time_msg}",
                show_alert=True
            )
            return
        
        await c.message.answer("–ñ–∞–ª–æ–±–∞. –ö—Ç–æ –≤—ã? (–∫–ª–∏–µ–Ω—Ç/–º–∞—Å—Ç–µ—Ä/–¥—Ä—É–≥–æ–µ)")
        await state.set_state(Complaint.who)
        
    elif action == "billing":
        await c.message.answer(
            "<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏ —É—Å–ª—É–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤</b>\n\n"
            "üîπ –ù–æ–≤—ã–º –º–∞—Å—Ç–µ—Ä–∞–º: 3 –∑–∞–∫–∞–∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "üîπ –î–∞–ª–µ–µ –ø–æ–¥–ø–∏—Å–∫–∞: 990 ‚ÇΩ/–º–µ—Å (–±–µ–∑–ª–∏–º–∏—Ç)\n\n"
            "–î–æ–ø.—É—Å–ª—É–≥–∏:\n"
            "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–æ–≤ ‚Äî 490 ‚ÇΩ/–º–µ—Å\n"
            "üìå –ó–∞–∫—Ä–µ–ø –∞–Ω–∫–µ—Ç—ã ‚Äî 190 ‚ÇΩ/–Ω–µ–¥\n",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ 990 ‚ÇΩ", callback_data="pay:sub")],
                [InlineKeyboardButton(text="‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 490 ‚ÇΩ", callback_data="pay:priority")],
                [InlineKeyboardButton(text="üìå –ó–∞–∫—Ä–µ–ø 190 ‚ÇΩ", callback_data="pay:pin")],
                [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="go:menu")]
            ])
        )
    elif action == "menu":
        await c.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
            reply_markup=main_menu_kb(str(c.from_user.id))
        )
    
    await c.answer()

@dp.callback_query(F.data == "master:cancel")
async def master_cancel(c: CallbackQuery, state: FSMContext):
    await state.clear()
    await c.message.edit_text("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb(str(c.from_user.id)))
    await c.answer()

@dp.callback_query(F.data.startswith("review:"))
async def process_rating(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        _, request_id, rating = c.data.split(":")
        request_id, rating = int(request_id), int(rating)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        request = db.fetch_one("""
            SELECT master_id, contact 
            FROM requests 
            WHERE id = ?
        """, (request_id,))
        
        if not request:
            await c.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        master_id = request['master_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        db.execute("""
            INSERT INTO reviews (request_id, master_id, client_id, rating)
            VALUES (?, ?, ?, ?)
        """, (request_id, master_id, str(c.from_user.id), rating))
        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞
        await update_master_stats(master_id)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_text:{request_id}")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"review_done:{request_id}")]
        ])
        
        await c.message.edit_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating} {get_rating_stars(rating)}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤?",
            reply_markup=kb
        )
        
        await c.answer()
        
    except Exception as e:
        logging.error(f"[RATING_PROCESS_ERROR] {e}")
        await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏")

@dp.callback_query(F.data.startswith("review_text:"))
async def request_review_text(c: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    try:
        request_id = int(c.data.split(":")[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(review_request_id=request_id)
        await state.set_state(Complaint.text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        
        await c.message.edit_text(
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:\n\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?\n"
            "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞?\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        
        await c.answer()
        
    except Exception as e:
        logging.error(f"[REVIEW_TEXT_ERROR] {e}")
        await c.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("review_done:"))
async def finish_review(c: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∑—ã–≤–∞"""
    try:
        request_id = int(c.data.split(":")[1])
        
        await c.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞."
        )
        
        await c.answer()
        
    except Exception as e:
        logging.error(f"[REVIEW_DONE_ERROR] {e}")
        await c.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("review_skip:"))
async def skip_review(c: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∑—ã–≤–∞"""
    try:
        request_id = int(c.data.split(":")[1])
        
        await c.message.edit_text(
            "üëå –•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–∑–∂–µ."
        )
        
        await c.answer()
        
    except Exception as e:
        logging.error(f"[REVIEW_SKIP_ERROR] {e}")
        await c.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("complete:"))
async def complete_order(c: CallbackQuery):
    """–ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π (–∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞)"""
    try:
        _, request_id = c.data.split(":")
        request_id = int(request_id)
        
        user_id = str(c.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        request = db.fetch_one("""
            SELECT id, master_id, status, client_user_id 
            FROM requests 
            WHERE id = ? AND master_id = (SELECT id FROM masters WHERE contact = ?)
        """, (request_id, user_id))
        
        if not request:
            await c.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        
        if request['status'] == 'completed':
            await c.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
            return
        
        if request['status'] == 'pending_confirmation':
            await c.answer("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞", show_alert=True)
            return
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        db.execute(
            "UPDATE requests SET status = 'pending_confirmation' WHERE id = ?", 
            (request_id,)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await c.message.edit_text(
            "‚è≥ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.\n"
            "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –∫–ª–∏–µ–Ω—Ç–∞
        if request['client_user_id']:
            master_info = db.fetch_one("SELECT fio FROM masters WHERE id = ?", (request['master_id'],))
            master_name = master_info['fio'] if master_info else "–ú–∞—Å—Ç–µ—Ä"
            
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ", callback_data=f"confirm:{request_id}:yes")],
                [InlineKeyboardButton(text="‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã", callback_data=f"confirm:{request_id}:no")]
            ])
            
            try:
                await bot.send_message(
                    int(request['client_user_id']),
                    f"üë®‚Äçüîß <b>{master_name}</b> –æ—Ç–º–µ—Ç–∏–ª –∑–∞–∫–∞–∑ #{request_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.\n\n"
                    f"–†–∞–±–æ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ?",
                    reply_markup=kb
                )
            except Exception as e:
                logging.error(f"[CLIENT_CONFIRM_ERROR] {e}")
        
        await c.answer()
        
    except Exception as e:
        logging.error(f"[COMPLETE_ORDER_ERROR] {e}")
        await c.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("confirm:"))
async def client_confirmation(c: CallbackQuery):
    """–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        _, request_id, answer = c.data.split(":")
        request_id = int(request_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        request = db.fetch_one("""
            SELECT id, master_id, status, name
            FROM requests 
            WHERE id = ?
        """, (request_id,))
        
        if not request:
            await c.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if request['status'] == 'completed':
            await c.answer("‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω", show_alert=True)
            return
        
        if answer == "yes":
            # –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
            success = await mark_request_completed(request_id)
            
            if success:
                await c.message.edit_text(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–∞—Å—Ç–µ—Ä–∞ üëá"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
                master = db.fetch_one("SELECT contact FROM masters WHERE id = ?", (request['master_id'],))
                if master:
                    try:
                        await bot.send_message(
                            int(master['contact']),
                            f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{request_id}.\n"
                            f"–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ! üéâ"
                        )
                    except Exception as e:
                        logging.error(f"[MASTER_NOTIFY_ERROR] {e}")
            else:
                await c.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        
        elif answer == "no":
            # –ö–ª–∏–µ–Ω—Ç –∂–∞–ª—É–µ—Ç—Å—è
            await c.message.edit_text(
                "üòî –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.\n"
                "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=main_menu_kb(str(c.from_user.id))
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "assigned"
            db.execute("UPDATE requests SET status = 'assigned' WHERE id = ?", (request_id,))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await notify_admin(
                f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º #{request_id}</b>\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: {request['name']}\n"
                f"–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç.\n\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
            master = db.fetch_one("SELECT contact FROM masters WHERE id = ?", (request['master_id'],))
            if master:
                try:
                    await bot.send_message(
                        int(master['contact']),
                        f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∑–∞–∫–∞–∑–æ–º #{request_id}.\n"
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
                    )
                except Exception as e:
                    logging.error(f"[MASTER_NOTIFY_ERROR] {e}")
        
        await c.answer()
        
    except Exception as e:
        logging.error(f"[CLIENT_CONFIRMATION_ERROR] {e}")
        await c.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(Command("delete_profile"))
async def delete_profile(m: Message):
    user_id = str(m.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
    db.execute("DELETE FROM masters WHERE contact = ?", (user_id,))
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∏ –ø–æ —Å—Ç–∞—Ä–æ–º—É contact, –∏ –ø–æ –Ω–æ–≤–æ–º—É client_user_id)
    db.execute("""
        DELETE FROM requests 
        WHERE contact = ? OR client_user_id = ?
    """, (user_id, user_id))
    
    # –£–¥–∞–ª—è–µ–º –∂–∞–ª–æ–±—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –º–∞—Å—Ç–µ—Ä
    db.execute("DELETE FROM complaints WHERE who = ? OR master_id = ?", (user_id, user_id))
    
    await m.answer(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
        "–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=main_menu_kb(str(m.from_user.id))
    )

@dp.message(Command("help"))
async def cmd_help(m: Message):
    """–ü–æ–º–æ—â—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞"""
    user_id = str(m.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
    is_master = db.fetch_one("SELECT id FROM masters WHERE contact = ?", (user_id,))
    
    help_text = [
        "‚ùì <b>–ü–û–ú–û–©–¨</b>\n",
        "ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>",
        "",
        "üìù <b>–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>",
        "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚Äî –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –º—ã –ø–æ–¥–±–µ—Ä—ë–º –º–∞—Å—Ç–µ—Ä–æ–≤",
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä–∞ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é",
        "‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤",
        "",
        "üë®‚Äçüîß <b>–î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤:</b>",
        "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é",
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        "‚Ä¢ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
        "",
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "‚Ä¢ /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "‚Ä¢ /faq ‚Äî —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "‚Ä¢ /support ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
        "‚Ä¢ /limits ‚Äî –≤–∞—à–∏ –ª–∏–º–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π",
    ]
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    if is_master:
        help_text.extend([
            "",
            "üë®‚Äçüîß <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤:</b>",
            "‚Ä¢ /master ‚Äî –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
            "‚Ä¢ /my_orders ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤",
            "‚Ä¢ /my_reviews ‚Äî –º–æ–∏ –æ—Ç–∑—ã–≤—ã",
            "‚Ä¢ /my_stats ‚Äî –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        ])
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin(m.from_user.id):
        help_text.extend([
            "",
            "üëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>",
            "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞",
            "‚Ä¢ /cleanup_status ‚Äî —Å—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
            "‚Ä¢ /cleanup_now ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞",
            "‚Ä¢ /reviews <id> ‚Äî –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞"
        ])
    
    help_text.extend([
        "",
        "üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>",
        "‚Ä¢ /delete_profile ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ",
        "",
        "üí¨ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî /support"
    ])

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùî –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="help:faq"),
            InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help:support")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
    ])

    await m.answer("\n".join(help_text), reply_markup=kb)

@dp.message(Command("faq"))
async def cmd_faq(m: Message):
    """–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    await show_faq(m.chat.id)

@dp.callback_query(F.data == "help:faq")
async def callback_faq(c: CallbackQuery):
    """FAQ —á–µ—Ä–µ–∑ callback"""
    await show_faq(c.message.chat.id)
    await c.answer()

async def show_faq(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
    faq_text = [
        "‚ùî <b>–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´</b>\n",
        
        "<b>üôã‚Äç‚ôÇÔ∏è –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n",
        
        "‚ùì <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É?</b>",
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª",
        "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏",
        "‚Ä¢ –ú—ã –ø–æ–¥–±–µ—Ä—ë–º 3-5 –º–∞—Å—Ç–µ—Ä–æ–≤",
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é",
        "",
        
        "‚ùì <b>–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?</b>",
        "‚Ä¢ –ü–æ–¥–±–æ—Ä –º–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî –ë–ï–°–ü–õ–ê–¢–ù–û",
        "‚Ä¢ –¶–µ–Ω—É –æ–±—Å—É–∂–¥–∞–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Å –º–∞—Å—Ç–µ—Ä–æ–º",
        "",
        
        "‚ùì <b>–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞?</b>",
        "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ (‚≠ê)",
        "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "‚Ä¢ –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É",
        "",
        
        "‚ùì <b>–ß—Ç–æ –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–ª–æ—Ö–æ?</b>",
        "‚Ä¢ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã¬ª",
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "",
        
        "<b>üë®‚Äçüîß –î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤:</b>\n",
        
        "‚ùì <b>–ö–∞–∫ —Å—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º?</b>",
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º¬ª",
        "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É",
        "‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
        "",
        
        "‚ùì <b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?</b>",
        "‚Ä¢ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞ ‚Äî –ë–ï–°–ü–õ–ê–¢–ù–û",
        "‚Ä¢ –î–∞–ª–µ–µ: 990 ‚ÇΩ/–º–µ—Å (–±–µ–∑–ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤)",
        "",
        
        "‚ùì <b>–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤?</b>",
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (4.5+)",
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∑–∞—è–≤–∫–∏",
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (490 ‚ÇΩ/–º–µ—Å)",
        "",
        
        "‚ùì <b>–ß—Ç–æ –¥–∞—é—Ç —Å—Ç–∞—Ç—É—Å—ã?</b>",
        "‚Ä¢ üü° –ö–∞–Ω–¥–∏–¥–∞—Ç ‚Äî –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
        "‚Ä¢ üü¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π ‚Äî –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        "‚Ä¢ üíé –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî –ù–ü–î/–ò–ü –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
        "",
        
        "üí¨ –ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç? ‚Äî /support"
    ]
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="help:support")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
    ])
    
    await bot.send_message(chat_id, "\n".join(faq_text), reply_markup=kb)

@dp.message(Command("support"))
async def cmd_support(m: Message):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    await show_support(m.chat.id)

@dp.callback_query(F.data == "help:support")
async def callback_support(c: CallbackQuery):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await show_support(c.message.chat.id)
    await c.answer()

async def show_support(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_text = [
        "üìû <b>–ü–û–î–î–ï–†–ñ–ö–ê</b>\n",
        "–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n",
        
        "<b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>",
        "‚Ä¢ üì± Telegram: @am_burkov",
        "‚Ä¢ üìß Email: aburkov2017@yandex.ru",
        "‚Ä¢ ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 10:00-19:00",
        "",
        
        "<b>üìù –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∂–∞–ª–æ–±—É:</b>",
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É ‚Äî –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        "",
        
        "üí° <b>–ü–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:</b>",
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /faq ‚Äî –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç —É–∂–µ –µ—Å—Ç—å",
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ"
    ]
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö® –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="go:complaint")],
        [InlineKeyboardButton(text="‚ùî –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="help:faq")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
    ])
    
    await bot.send_message(chat_id, "\n".join(support_text), reply_markup=kb)

@dp.callback_query(F.data == "master:cabinet")
async def callback_master_cabinet(c: CallbackQuery):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ (—á–µ—Ä–µ–∑ callback)"""
    user_id = str(c.from_user.id)

    data = await get_master_cabinet_data(user_id)

    if not data:
        await c.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä",
            show_alert=True
        )
        return

    await c.message.answer(data["text"], reply_markup=data["keyboard"])
    await c.answer()

@dp.message(Command("master"))
async def cmd_master_cabinet(m: Message):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞"""
    user_id = str(m.from_user.id)

    data = await get_master_cabinet_data(user_id)

    if not data:
        await m.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë®‚Äçüîß –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º", callback_data="go:master")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
            ])
        )
        return

    await m.answer(data["text"], reply_markup=data["keyboard"])

@dp.message(Command("limits"))
async def cmd_limits(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = m.from_user.id
    
    limits_info = [
        "üìä <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>\n",
        f"üöÄ –ó–∞–ø—É—Å–∫–∏ –±–æ—Ç–∞: {rate_limiter.get_remaining(user_id, 'start_command', 10, 3600)}/10 (–≤ —á–∞—Å)",
        f"üìù –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: {rate_limiter.get_remaining(user_id, 'new_request', 3, 3600)}/3 (–≤ —á–∞—Å)",
        f"üë®‚Äçüîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞: {rate_limiter.get_remaining(user_id, 'master_registration', 1, 86400)}/1 (–≤ —Å—É—Ç–∫–∏)",
        f"üö® –ñ–∞–ª–æ–±—ã: {rate_limiter.get_remaining(user_id, 'complaint', 5, 86400)}/5 (–≤ —Å—É—Ç–∫–∏)",
        f"‚ö° –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏: {rate_limiter.get_remaining(user_id, 'offer_actions', 10, 3600)}/10 (–≤ —á–∞—Å)",
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: {rate_limiter.get_remaining(user_id, 'any_message', 20, 60)}/20 (–≤ –º–∏–Ω—É—Ç—É)",
        "",
        "üí° <i>–õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"
    ]
    
    await m.answer("\n".join(limits_info))

@dp.message(Command("cleanup_now"))
async def cmd_cleanup_now(m: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await m.answer("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ
        pending_count = db.fetch_one("""
            SELECT COUNT(*) as count 
            FROM masters 
            WHERE created_at < datetime('now', '-72 hours')
              AND (passport_scan_file_id IS NOT NULL 
                   OR face_photo_file_id IS NOT NULL 
                   OR npd_ip_doc_file_id IS NOT NULL)
        """)['count']
        
        if pending_count == 0:
            await m.answer("‚úÖ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–≤—Å–µ –º–æ–ª–æ–∂–µ 72 —á–∞—Å–æ–≤)")
            return
        
        await m.answer(f"üßπ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {pending_count}\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        await safe_cleanup_documents()
        
        await m.answer("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.error(f"[MANUAL_CLEANUP_ERROR] {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)[:500]}")

@dp.message(Command("cleanup_status"))
async def cmd_cleanup_status(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        stats = db.fetch_one("""
            SELECT 
                COUNT(*) as total_masters,
                COUNT(CASE WHEN passport_scan_file_id IS NOT NULL THEN 1 END) as with_passport,
                COUNT(CASE WHEN face_photo_file_id IS NOT NULL THEN 1 END) as with_face_photo,
                COUNT(CASE WHEN npd_ip_doc_file_id IS NOT NULL THEN 1 END) as with_npd_doc,
                COUNT(CASE WHEN created_at < datetime('now', '-72 hours') 
                          AND (passport_scan_file_id IS NOT NULL 
                               OR face_photo_file_id IS NOT NULL 
                               OR npd_ip_doc_file_id IS NOT NULL) THEN 1 END) as pending_cleanup
            FROM masters
        """)
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤
        pending_masters = db.fetch_all("""
            SELECT id, fio, level, datetime(created_at) as created_time
            FROM masters 
            WHERE created_at < datetime('now', '-72 hours')
              AND (passport_scan_file_id IS NOT NULL 
                   OR face_photo_file_id IS NOT NULL 
                   OR npd_ip_doc_file_id IS NOT NULL)
            ORDER BY created_at ASC
            LIMIT 10
        """)
        
        report_lines = [
            "üìä <b>–°—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>",
            "",
            f"üë• –í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {stats['total_masters']}",
            f"üìÑ –° —Å–∫–∞–Ω–∞–º–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞: {stats['with_passport']}",
            f"üì∑ –° —Ñ–æ—Ç–æ –ª–∏—Ü–∞: {stats['with_face_photo']}",
            f"üè¢ –° –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ù–ü–î/–ò–ü: {stats['with_npd_doc']}",
            f"üßπ –û–∂–∏–¥–∞—é—Ç –æ—á–∏—Å—Ç–∫–∏ (>72—á): {stats['pending_cleanup']}",
            "",
            "<b>–ë–ª–∏–∂–∞–π—à–∏–µ –∫ –æ—á–∏—Å—Ç–∫–µ:</b>"
        ]
        
        if pending_masters:
            for master in pending_masters:
                time_ago = (datetime.now() - datetime.fromisoformat(master['created_time'])).days
                report_lines.append(
                    f"#{master['id']} {master['fio'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} "
                    f"({master['level']}) - {time_ago} –¥–Ω. –Ω–∞–∑–∞–¥"
                )
        else:
            report_lines.append("‚úÖ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        report_lines.extend([
            "",
            "üí° <i>–û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞</i>",
            "‚ö° <i>–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞: /cleanup_now</i>"
        ])
        
        await m.answer("\n".join(report_lines))
        
    except Exception as e:
        logging.error(f"[CLEANUP_STATUS_ERROR] {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)[:500]}")

@dp.message(Command("my_reviews"))
async def cmd_my_reviews(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞)"""
    user_id = str(m.from_user.id)

    data = await get_master_reviews_data(user_id)

    if not data:
        await m.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä")
        return

    if "error" in data:
        await m.answer(data["error"])
        return

    await m.answer(data["text"])

@dp.callback_query(F.data == "master:reviews")
async def callback_master_reviews(c: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ (callback)"""
    user_id = str(c.from_user.id)

    data = await get_master_reviews_data(user_id)

    if not data:
        await c.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
        return

    if "error" in data:
        await c.answer(data["error"], show_alert=True)
        return

    await c.message.answer(data["text"])
    await c.answer()

@dp.message(Command("my_stats"))
async def cmd_my_stats(m: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞)"""
    user_id = str(m.from_user.id)

    data = await get_master_stats_data(user_id)

    if not data:
        await m.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä")
        return

    if "error" in data:
        await m.answer(data["error"])
        return

    await m.answer(data["text"])

@dp.message(Command("my_requests"))
async def cmd_my_requests(m: Message):
    """–ú–æ–∏ –∑–∞—è–≤–∫–∏ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)"""
    user_id = str(m.from_user.id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
        requests = db.fetch_all("""
            SELECT id, category, district, status, created_at, master_id
            FROM requests 
            WHERE client_user_id = ?
            ORDER BY created_at DESC
            LIMIT 20
        """, (user_id,))
        
        if not requests:
            await m.answer(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="go:req")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
                ])
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        active = [r for r in requests if r['status'] in ('new', 'assigned', 'pending_confirmation')]
        completed = [r for r in requests if r['status'] == 'completed']
        
        text_lines = ["üìù <b>–ú–æ–∏ –∑–∞—è–≤–∫–∏</b>\n"]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ
        if active:
            text_lines.append(f"üü¢ <b>–ê–ö–¢–ò–í–ù–´–ï ({len(active)}):</b>")
            for req in active[:5]:
                date = datetime.fromisoformat(req['created_at']).strftime('%d.%m.%Y')
                
                status_emoji = {
                    'new': 'üÜï',
                    'assigned': 'üë®‚Äçüîß',
                    'pending_confirmation': '‚è≥'
                }
                
                status_text = {
                    'new': '–ò—â–µ–º –º–∞—Å—Ç–µ—Ä–∞',
                    'assigned': '–ú–∞—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
                    'pending_confirmation': '–ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                }
                
                emoji = status_emoji.get(req['status'], '‚ùì')
                status = status_text.get(req['status'], req['status'])
                
                text_lines.append(
                    f"  {emoji} #{req['id']} | {req['category']} | {date}\n"
                    f"  üìç {req['district']}\n"
                    f"  üìä –°—Ç–∞—Ç—É—Å: {status}"
                )
            
            if len(active) > 5:
                text_lines.append(f"  ... –∏ –µ—â—ë {len(active) - 5} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            text_lines.append("")
        
        # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
        if completed:
            text_lines.append(f"‚úÖ <b>–ó–ê–í–ï–†–®–Å–ù–ù–´–ï ({len(completed)}):</b>")
            for req in completed[:5]:
                date = datetime.fromisoformat(req['created_at']).strftime('%d.%m.%Y')
                text_lines.append(f"  ‚úÖ #{req['id']} | {req['category']} | {date}")
            
            if len(completed) > 5:
                text_lines.append(f"  ... –∏ –µ—â—ë {len(completed) - 5} –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö")
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="go:req")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go:menu")]
        ])
        
        await m.answer("\n".join(text_lines), reply_markup=kb)
        
    except Exception as e:
        logging.error(f"[MY_REQUESTS_ERROR] {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

@dp.callback_query(F.data == "master:stats")
async def callback_master_stats(c: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ (callback)"""
    user_id = str(c.from_user.id)

    data = await get_master_stats_data(user_id)

    if not data:
        await c.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
        return

    if "error" in data:
        await c.answer(data["error"], show_alert=True)
        return

    await c.message.answer(data["text"])
    await c.answer()

@dp.message(Command("my_orders"))
async def cmd_my_orders(m: Message):
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞)"""
    user_id = str(m.from_user.id)

    data = await get_master_orders_data(user_id)

    if not data:
        await m.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä")
        return

    if "error" in data:
        await m.answer(data["error"])
        return

    await m.answer(data["text"])

@dp.callback_query(F.data == "master:orders")
async def callback_master_orders(c: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ (callback)"""
    user_id = str(c.from_user.id)

    data = await get_master_orders_data(user_id)

    if not data:
        await c.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
        return

    if "error" in data:
        await c.answer(data["error"], show_alert=True)
        return

    await c.message.answer(data["text"])
    await c.answer()

@dp.message(Command("reviews"))
async def cmd_reviews(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º ID –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã: /reviews 123
        args = m.text.split()
        if len(args) < 2:
            await m.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reviews <id_–º–∞—Å—Ç–µ—Ä–∞>")
            return
        
        master_id = int(args[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        master = db.fetch_one("SELECT fio FROM masters WHERE id = ?", (master_id,))
        if not master:
            await m.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
        reviews = db.fetch_all("""
            SELECT r.rating, r.comment, r.created_at, req.id as request_id
            FROM reviews r
            JOIN requests req ON r.request_id = req.id
            WHERE r.master_id = ?
            ORDER BY r.created_at DESC
            LIMIT 20
        """, (master_id,))
        
        if not reviews:
            await m.answer(f"üìù –£ –º–∞—Å—Ç–µ—Ä–∞ #{master_id} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
            return
        
        review_lines = [f"‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞ {master['fio']} (#{master_id})</b>\n"]
        
        for i, review in enumerate(reviews, 1):
            stars = get_rating_stars(review['rating'])
            date = datetime.fromisoformat(review['created_at']).strftime('%d.%m.%Y')
            
            review_lines.append(f"\n{i}. {stars} <i>({date})</i> - –ó–∞—è–≤–∫–∞ #{review['request_id']}")
            if review['comment']:
                review_lines.append(f"   üí¨ {review['comment'][:100]}{'...' if len(review['comment']) > 100 else ''}")
        
        await m.answer("\n".join(review_lines))
        
    except Exception as e:
        logging.error(f"[REVIEWS_ERROR] {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤")

@dp.message(Command("stats"))
async def cmd_stats(m: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        stats = db.fetch_one("""
            SELECT 
                (SELECT COUNT(*) FROM masters) as total_masters,
                (SELECT COUNT(*) FROM masters WHERE level = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π') as verified_masters,
                (SELECT COUNT(*) FROM masters WHERE level = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π') as checked_masters,
                (SELECT COUNT(*) FROM masters WHERE level = '–ö–∞–Ω–¥–∏–¥–∞—Ç') as candidate_masters,
                (SELECT COUNT(*) FROM requests) as total_requests,
                (SELECT COUNT(*) FROM requests WHERE status = 'completed') as completed_requests,
                (SELECT COUNT(*) FROM requests WHERE status = 'new') as new_requests,
                (SELECT COUNT(*) FROM reviews) as total_reviews,
                (SELECT COUNT(*) FROM masters WHERE sub_until > datetime('now')) as active_subscriptions
        """)
        
        await m.answer(f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞</b>

üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_masters']}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {stats['verified_masters']}
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: {stats['checked_masters']}  
‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: {stats['candidate_masters']}
‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['active_subscriptions']}

üìù <b>–ó–∞—è–≤–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_requests']}
‚Ä¢ –ù–æ–≤—ã–µ: {stats['new_requests']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_requests']}

‚≠ê <b>–û—Ç–∑—ã–≤—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_reviews']}
        """)
        
    except Exception as e:
        logging.error(f"[STATS_ERROR] {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ----------------- REQUEST FLOW --------
@dp.message(Req.name)
async def req_name(m: Message, state: FSMContext):
    user_id = m.from_user.id
    
    # –õ–∏–º–∏—Ç: 3 –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Å
    if not rate_limiter.check_limit(user_id, "new_request", 3, 3600):
        remaining = rate_limiter.get_remaining(user_id, "new_request", 3, 3600)
        remaining_time = rate_limiter.get_time_until_reset(user_id, "new_request", 3600)
        
        if remaining_time > 0:
            minutes = (remaining_time % 3600) // 60
            await m.answer(
                f"‚ùå –õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {minutes} –º–∏–Ω—É—Ç.\n"
                f"üí° –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: {remaining} –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞"
            )
        else:
            await m.answer(f"‚ùå –õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: {remaining} –∑–∞—è–≤–æ–∫")
        return
    
    await state.update_data(name=m.text.strip())
    await m.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):", reply_markup=share_phone_kb())
    await state.set_state(Req.contact)

@dp.message(Req.contact, F.contact)
async def req_contact_shared(m: Message, state: FSMContext):
    await state.update_data(contact=m.contact.phone_number)
    
    await m.answer(
        "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", 
        reply_markup=categories_kb()
    )
    await state.set_state(Req.category)

@dp.message(Req.contact)
async def req_contact_text(m: Message, state: FSMContext):
    await state.update_data(contact=m.text.strip())
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=categories_kb(), reply_markup_remove=True)
    await state.set_state(Req.category)

@dp.callback_query(Req.category, F.data.startswith("cat:"))
async def req_category(c: CallbackQuery, state: FSMContext):
    code = c.data.split(":")[1]
    title = next((t for t, cc in CATS if cc == code), code)
    await state.update_data(category=title)
    await c.message.answer(
        "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 25 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞)"
    )
    await state.set_state(Req.district)
    await c.answer()

@dp.message(Req.district)
async def req_district(m: Message, state: FSMContext):
    address = m.text.strip()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã 5 —Å–∏–º–≤–æ–ª–æ–≤
    if len(address) < 5:
        await m.answer(
            "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 25"
        )
        return
    
    await state.update_data(district=address)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:")
    await state.set_state(Req.desc)

@dp.message(Req.desc)
async def req_desc(m: Message, state: FSMContext):
    await state.update_data(description=m.text.strip())
    await m.answer("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? (–¥–∞—Ç–∞/–≤—Ä–µ–º—è, —É–¥–æ–±–Ω—ã–µ —Å–ª–æ—Ç—ã)")
    await state.set_state(Req.when)

@dp.message(Req.when)
async def req_when(m: Message, state: FSMContext):
    await state.update_data(when_text=m.text.strip())
    d = await state.get_data()
    preview = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:</b>\n"
        f"üë§ {d['name']}\n"
        f"üìû {d['contact']}\n"
        f"üìÇ {d['category']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {d['district']}\n"
        f"üìù {d['description']}\n"
        f"üóì {d['when_text']}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å?"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="req:submit"),
         InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="go:req")]
    ])
    await m.answer(preview, reply_markup=kb)
    await state.set_state(Req.preview)

@dp.callback_query(Req.preview, F.data=="req:submit")
async def req_submit(c: CallbackQuery, state: FSMContext):
    d = await state.get_data()
    client_user_id = str(c.from_user.id)
    
    result = db.execute(
        "INSERT INTO requests(name,contact,category,district,description,when_text,status,client_user_id) "
        "VALUES(?,?,?,?,?,?,?,?)",
        (d["name"], d["contact"], d["category"], d["district"], d["description"], d["when_text"], "new", client_user_id)
    )
    rid = result.lastrowid if result else None
    db.commit()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await notify_admin(
        f"üÜï <b>–ó–∞—è–≤–∫–∞ #{rid}</b>\n"
        f"üë§ {d['name']} | {d['contact']}\n"
        f"üìÇ {d['category']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {d['district']}\n"
        f"üìù {d['description']}\n"
        f"üóì {d['when_text']}"
    )

    # —Ä–∞—Å—Å—ã–ª–∫–∞ –º–∞—Å—Ç–µ—Ä–∞–º
    await send_to_masters(rid, d["category"], d["district"])

    await c.message.edit_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã –ø–æ–¥–±–µ—Ä—ë–º 1‚Äì3 –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", 
        reply_markup=main_menu_kb(str(c.from_user.id))
    )
    await state.clear()
    await c.answer()

# ----------------- ANKETA MASTER -------
@dp.callback_query(F.data=="go:master")
async def go_master(c: CallbackQuery, state: FSMContext):
    user_id = c.from_user.id
    
    # –õ–∏–º–∏—Ç: 3 –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞ 24 —á–∞—Å–∞
    if not rate_limiter.check_limit(user_id, "master_registration", 3, 86400):
        remaining_time = rate_limiter.get_time_until_reset(user_id, "master_registration", 86400)
        hours = remaining_time // 10800
        
        await c.answer(
            f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–∞ 3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤.",
            show_alert=True
        )
        return
    
    await state.clear()
    await c.message.answer("–ê–Ω–∫–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:")
    await state.set_state(MasterForm.fio)
    await c.answer()

async def cancel_master_registration(m: Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    await state.clear()
    await m.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(str(m.from_user.id)))

@dp.message(MasterForm.fio)
async def mf_fio(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return

    await state.update_data(fio=m.text.strip(), uid=str(m.from_user.id))
    await m.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True, 
            one_time_keyboard=True
        )
    )
    await state.set_state(MasterForm.phone)

def normalize_phone(raw: str) -> str | None:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
    –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: +7 9... –∏–ª–∏ 8 9...
    """
    digits = re.sub(r"\D", "", raw)  # —É–±–∏—Ä–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    if digits.startswith("7") and len(digits) == 11:  # +7XXXXXXXXXX ‚Üí —É–∂–µ –Ω–æ—Ä–º
        return "+7" + digits[1:]
    elif digits.startswith("8") and len(digits) == 11:  # 8XXXXXXXXXX ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        return "+7" + digits[1:]
    elif digits.startswith("9") and len(digits) == 10:  # 9XXXXXXXXX ‚Üí –¥–æ–±–∞–≤–∏–º +7
        return "+7" + digits
    return None

@dp.message(MasterForm.phone, F.contact)
async def mf_phone_contact(m: Message, state: FSMContext):
    normalized = normalize_phone(m.contact.phone_number)
    if not normalized:
        await m.answer("‚ùå –ù–æ–º–µ—Ä –∏–∑ Telegram –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 9XXXXXXXXX –∏–ª–∏ 8 9XXXXXXXXX.")
        return
    
    await state.update_data(phone=normalized, sel_cats=[])
    
    await m.answer(
        "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å/—Å–Ω–∏–º–∞—Ç—å —á–µ–∫):",
        reply_markup=build_cats_kb([])
    )
    
    await state.set_state(MasterForm.categories)

@dp.message(MasterForm.phone, F.text)
async def mf_phone_text(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    normalized = normalize_phone(m.text.strip())
    if normalized:
        await state.update_data(phone=normalized, sel_cats=[])
        
        await m.answer(
            "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await m.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å/—Å–Ω–∏–º–∞—Ç—å —á–µ–∫):",
            reply_markup=build_cats_kb([])
        )
        
        await state.set_state(MasterForm.categories)
    else:
        await m.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ +7 9XXXXXXXXX\n"
            "‚Ä¢ 8 9XXXXXXXXX\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª."
        )

@dp.callback_query(MasterForm.categories, F.data.startswith("mcat:toggle:"))
async def mcat_toggle(c: CallbackQuery, state: FSMContext):
    title = c.data.split("mcat:toggle:", 1)[1]
    d = await state.get_data()
    sel = d.get("sel_cats", [])
    if title in sel:
        sel.remove(title)
    else:
        if len(sel) >= 2:
            await c.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", show_alert=True)
        else:
            sel.append(title)
    await state.update_data(sel_cats=sel)
    await c.message.edit_reply_markup(reply_markup=build_cats_kb(sel))
    await c.answer()

@dp.callback_query(MasterForm.categories, F.data == "mcat:done")
async def mcat_done(c: CallbackQuery, state: FSMContext):
    d = await state.get_data()
    sel = d.get("sel_cats", [])
    if not (1 <= len(sel) <= 2):
        await c.answer("–í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ categories_auto (—Å—Ç—Ä–æ–∫–æ–π –≤–∏–¥–∞ "–†–µ–º–æ–Ω—Ç, –£–±–æ—Ä–∫–∞")
    cats_str = ", ".join(sel)
    await state.update_data(categories_auto=cats_str)
    await c.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats_str}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –ø–æ –≥–æ–¥–∞–º:",
        reply_markup=exp_bucket_kb()
    )
    await state.set_state(MasterForm.exp_bucket)
    await c.answer()

@dp.callback_query(MasterForm.exp_bucket, F.data.startswith("exp:"))
async def mf_exp_bucket(c: CallbackQuery, state: FSMContext):
    bucket = c.data.split(":")[1]
    mapping = {"<=1":"–¥–æ 1 –≥–æ–¥–∞","1-3":"1‚Äì3 –≥–æ–¥–∞","3-5":"3‚Äì5 –ª–µ—Ç","5-10":"5‚Äì10 –ª–µ—Ç",">10":"–±–æ–ª–µ–µ 10 –ª–µ—Ç"}
    await state.update_data(exp_bucket=mapping.get(bucket, bucket))
    await c.message.answer("–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")
    await state.set_state(MasterForm.exp_text)
    await c.answer()

@dp.message(MasterForm.exp_text)
async def mf_exp_text(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    await state.update_data(exp_text=m.text.strip())
    await m.answer(
        "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    await state.set_state(MasterForm.portfolio)

@dp.message(MasterForm.portfolio)
async def mf_portfolio(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return

    await state.update_data(portfolio=m.text.strip())

    await m.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã 2‚Äì3 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    await state.set_state(MasterForm.references)

@dp.message(MasterForm.references)
async def mf_references(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return

    await state.update_data(references=m.text.strip())

    d = await state.get_data()
    # –ù–ï –∞–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cats_selected = d.get("categories_auto", "")  # —Å—é–¥–∞ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å—Ç—Ä–æ–∫—É "–†–µ–º–æ–Ω—Ç, –£–±–æ—Ä–∫–∞" –≤ mcat_done
    await state.update_data(categories_auto=cats_selected)

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    await state.update_data(level="–ö–∞–Ω–¥–∏–¥–∞—Ç", verified=0, has_npd_ip=0)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞, –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="mf:verify:yes"),
        InlineKeyboardButton(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–º", callback_data="mf:verify:no")
    ]])
    await m.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats_selected or '‚Äî'}\n"
        "–°–µ–π—á–∞—Å –≤–∞—à —Å—Ç–∞—Ç—É—Å: <b>–ö–∞–Ω–¥–∏–¥–∞—Ç</b>.\n"
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π</b>?",
        reply_markup=kb
    )
    await state.set_state(MasterForm.verify_offer)

@dp.callback_query(MasterForm.verify_offer, F.data == "mf:verify:no")
async def mf_verify_no(c: CallbackQuery, state: FSMContext):
    d = await state.get_data()
    cats_auto = d.get("categories_auto","")
    skill_tier = "–ù–æ–≤–∏—á–æ–∫"  # 0 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    result = db.execute("""
        INSERT INTO masters(fio,contact,phone,exp_bucket,exp_text,portfolio,references,
                            level,verified,has_npd_ip,categories_auto,orders_completed,skill_tier,
                            free_orders_left,is_active)
        VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,1)
    """, (d["fio"], d["uid"], d.get("phone",""), d.get("exp_bucket",""), d.get("exp_text",""),
            d.get("portfolio",""), d.get("references",""), "–ö–∞–Ω–¥–∏–¥–∞—Ç", 0, 0, cats_auto, 0, skill_tier, FREE_ORDERS_START))
    mid = result.lastrowid if result else None
    db.commit()

    await notify_admin(admin_master_card(mid))

    await c.message.edit_text(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: –ö–∞–Ω–¥–∏–¥–∞—Ç.", 
        reply_markup=main_menu_kb(str(c.from_user.id))
    )
    
    # ‚úÖ –£–ë–ò–†–ê–ï–ú REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–£:
    await c.message.answer(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await state.clear()
    await c.answer()

@dp.callback_query(MasterForm.verify_offer, F.data == "mf:verify:yes")
async def mf_verify_yes(c: CallbackQuery, state: FSMContext):
    # –¢–µ–∫—Å—Ç –∑–∞—è–≤–ª–µ–Ω–∏—è
    statement = (
        "üìÑ <b>–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
        "–Ø –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ ¬´–ú–∞—Å—Ç–µ—Ä–∞ –í–µ—Ä—Ö–Ω–µ–π –ü—ã—à–º—ã¬ª:\n"
        "‚Ä¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Å–µ—Ä–∏—è, –Ω–æ–º–µ—Ä, –∫–µ–º –≤—ã–¥–∞–Ω, –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏);\n"
        "‚Ä¢ –°–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ (–¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ¬´–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π¬ª);\n"
        "‚Ä¢ –ò–ù–ù –∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –ù–ü–î/–ò–ü (–¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ¬´–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π¬ª).\n\n"
        "<b>–Ø –ø–æ–Ω–∏–º–∞—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–µ:</b>\n"
        "1. –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
        "2. –í—Å–µ —Å–∫–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
        "3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–º—ã—Å–ª–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ ‚Ññ152-–§–ó, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ü–î–Ω.\n"
        "4. –í –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–º—è –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏, —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç).\n"
        "5. –Ø –≤–ø—Ä–∞–≤–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–≤–æ—ë –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n"
        "6. –Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏] –∏ [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º] —Å–µ—Ä–≤–∏—Å–∞ (https://disk.yandex.ru/d/1mlvS2VtcJTiXg).\n\n"
        "‚úÖ –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ:\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–≥ 18 –ª–µ—Ç;\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ;\n"
        "‚Ä¢ –ü–æ–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent:given")]
    ])
    await c.message.edit_text(statement, reply_markup=kb, disable_web_page_preview=True)
    await state.set_state(MasterForm.consent)
    await c.answer()

@dp.callback_query(MasterForm.consent, F.data == "consent:given")
async def consent_given(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n"
        "¬´—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä; –∫–µ–º –≤—ã–¥–∞–Ω; –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏; –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è¬ª."
    )
    await state.set_state(MasterForm.passport_info)
    await c.answer()

@dp.message(MasterForm.passport_info)
async def mf_passport_info(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    # –¢–µ–∫—Å—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º
    await m.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Å–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞</b> (—Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    await state.set_state(MasterForm.passport_scan)

@dp.message(MasterForm.passport_scan, F.photo)
async def mf_passport_scan(m: Message, state: FSMContext):
    await state.update_data(passport_scan_file_id=m.photo[-1].file_id)
    await m.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>–≤–∞—à–µ —Ñ–æ—Ç–æ</b> (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å—Ç–µ—Ä–∞):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    await state.set_state(MasterForm.face_photo)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø—Ä–∏—à–ª—ë—Ç –Ω–µ —Ñ–æ—Ç–æ):
@dp.message(MasterForm.passport_scan)
async def mf_passport_scan_invalid(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –§–û–¢–û –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–µ —Ç–µ–∫—Å—Ç).")

@dp.message(MasterForm.face_photo, F.photo)
async def mf_face_photo(m: Message, state: FSMContext):
    await state.update_data(face_photo_file_id=m.photo[-1].file_id)

    # —Ç–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä ‚Äî –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
    d = await state.get_data()
    cats_auto = d.get("categories_auto","")
    skill_tier = calc_skill_tier(0)
    result = db.execute("""
      INSERT INTO masters(fio, contact, phone, exp_bucket, exp_text, portfolio, references,
                          level, verified, has_npd_ip, passport_scan_file_id, face_photo_file_id,
                          categories_auto, orders_completed, skill_tier, free_orders_left, is_active)
      VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1)
    """, (
        d["fio"], d["uid"], d.get("phone",""), d.get("exp_bucket",""), d.get("exp_text",""),
        d.get("portfolio",""), d.get("references",""), "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π", 1, 0,
        d.get("passport_scan_file_id",""), d.get("face_photo_file_id",""),
        cats_auto, 0, skill_tier, FREE_ORDERS_START
    ))
    mid = result.lastrowid if result else None
    db.commit()

    await notify_admin(admin_master_card(mid))

    # –ø—Ä–µ–¥–ª–æ–∂–∏–º –∞–ø–≥—Ä–µ–π–¥ –¥–æ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ (–ù–ü–î/–ò–ü)
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞, —É –º–µ–Ω—è –ù–ü–î/–ò–ü", callback_data=f"mf:npd:yes:{mid}"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"mf:npd:no:{mid}")
    ]])
    
    await m.answer(
        "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π</b>.\n"
        "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π –∏–ª–∏ –ò–ü?\n"
        "–ï—Å–ª–∏ –¥–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</b>.", 
        reply_markup=kb
    )
    
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã—à–µ üëÜ",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await state.set_state(MasterForm.npd_offer)

@dp.message(MasterForm.face_photo)
async def mf_face_photo_invalid(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –§–û–¢–û (–Ω–µ —Ç–µ–∫—Å—Ç).")

@dp.callback_query(MasterForm.npd_offer, F.data.startswith("mf:npd:"))
async def mf_npd_offer(c: CallbackQuery, state: FSMContext):
    _, _, ans, mid = c.data.split(":")
    mid = int(mid)
    
    if ans == "no":
        await notify_admin(admin_master_card(mid))
        
        await c.message.edit_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π.", 
            reply_markup=main_menu_kb(str(c.from_user.id))
        )
        
        await c.message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await state.clear()
        await c.answer()
        return

    # ‚Äúyes‚Äù ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –ò–ù–ù
    await state.update_data(current_mid=mid)
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):")
    await state.set_state(MasterForm.inn_cert)
    await c.answer()

@dp.message(MasterForm.inn_cert)
async def mf_inn_cert(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    inn = m.text.strip()
    if not inn.isdigit() or len(inn) not in (10, 12):
        await m.answer(
            "‚ùå –ò–ù–ù –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
        return
    
    await state.update_data(inn_cert=inn)
    await m.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å/–ò–ü (—Ñ–æ—Ç–æ/—Å–∫–∞–Ω):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    await state.set_state(MasterForm.npd_doc)

@dp.message(MasterForm.npd_doc, F.photo)
async def mf_npd_doc(m: Message, state: FSMContext):
    d = await state.get_data()
    mid = d.get("current_mid")
    file_id = m.photo[-1].file_id
    inn = d.get("inn_cert","")
    
    db.execute("""
        UPDATE masters
        SET has_npd_ip=1,
            level='–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
            npd_ip_doc_file_id=?,
            inn=?
        WHERE id=?
    """, (file_id, inn, mid))

    await notify_admin(admin_master_card(mid))

    await m.answer(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.", 
        reply_markup=main_menu_kb(str(m.from_user.id))
    )
    
    await m.answer(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await state.clear()

@dp.message(MasterForm.npd_doc)
async def mf_npd_doc_invalid(m: Message, state: FSMContext):
    if m.text and m.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_master_registration(m, state)
        return
    
    await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –§–û–¢–û –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–µ —Ç–µ–∫—Å—Ç).")

# ----------------- BILLING -------------
@dp.callback_query(F.data=="pay:sub")
async def pay_sub(c: CallbackQuery):
    if not PAY_PROVIDER_TOKEN:
        await c.answer("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True); return
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π)", amount=SUB_PRICE_RUB)]
    await bot.send_invoice(
        chat_id=c.from_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞",
        description="–ë–µ–∑–ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ (30 –¥–Ω–µ–π)",
        payload="sub_30d",
        provider_token=PAY_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices
    )
    await c.answer()

@dp.callback_query(F.data=="pay:priority")
async def pay_priority(c: CallbackQuery):
    if not PAY_PROVIDER_TOKEN:
        await c.answer("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True); return
    prices = [LabeledPrice(label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (30 –¥–Ω–µ–π)", amount=PRIORITY_PRICE_RUB)]
    await bot.send_invoice(
        chat_id=c.from_user.id,
        title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
        description="–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º (30 –¥–Ω–µ–π)",
        payload="priority_30d",
        provider_token=PAY_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices
    )
    await c.answer()

@dp.callback_query(F.data=="pay:pin")
async def pay_pin(c: CallbackQuery):
    if not PAY_PROVIDER_TOKEN:
        await c.answer("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True); return
    prices = [LabeledPrice(label="–ó–∞–∫—Ä–µ–ø (7 –¥–Ω–µ–π)", amount=PIN_PRICE_RUB)]
    await bot.send_invoice(
        chat_id=c.from_user.id,
        title="–ó–∞–∫—Ä–µ–ø –∞–Ω–∫–µ—Ç—ã",
        description="–í—ã—à–µ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ (7 –¥–Ω–µ–π)",
        payload="pin_7d",
        provider_token=PAY_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices
    )
    await c.answer()

@dp.pre_checkout_query()
async def checkout(pre: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre.id, ok=True)

@dp.message(F.successful_payment)
async def payment_done(m: Message):
    payload = m.successful_payment.invoice_payload
    uid = str(m.from_user.id)
    if payload == "sub_30d":
        until = (datetime.utcnow() + timedelta(days=SUB_DURATION_DAYS)).strftime("%Y-%m-%d %H:%M:%S")
        db.execute("UPDATE masters SET sub_until=? WHERE contact=?", (until, uid))
        await m.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
    elif payload == "priority_30d":
        until = (datetime.utcnow() + timedelta(days=PRIORITY_DURATION_DAYS)).strftime("%Y-%m-%d %H:%M:%S")
        db.execute("UPDATE masters SET priority_until=? WHERE contact=?", (until, uid))
        await m.answer("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∫–ª—é—á—ë–Ω –Ω–∞ 30 –¥–Ω–µ–π.")
    elif payload == "pin_7d":
        until = (datetime.utcnow() + timedelta(days=PIN_DURATION_DAYS)).strftime("%Y-%m-%d %H:%M:%S")
        db.execute("UPDATE masters SET pin_until=? WHERE contact=?", (until, uid))
        await m.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π.")

# ----------------- MATCHING ------------
async def send_to_masters(request_id: int, category: str, district: str):
    # –≤—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤, —É –∫–æ–≥–æ –∞–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Ö–æ–¥—è—Ç
    rows = db.fetch_all("""
      SELECT id, fio, contact, level, priority_until, sub_until, categories_auto
      FROM masters
      WHERE is_active=1
    """)

    # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏ (–ø—Ä–æ—Å—Ç–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
    def cat_match(cats_auto: str, request_category: str) -> bool:
        if not cats_auto:
            return False  # –ú–∞—Å—Ç–µ—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–µ–µ)
        clean_request = re.sub(r"[^–∞-—è–ê-–Ø]", "", request_category).strip().lower()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
        master_cats = []
        for cat in cats_auto.split(","):
            # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–†–µ–º–æ–Ω—Ç/—ç–ª–µ–∫—Ç—Ä–∏–∫–∞" -> "—Ä–µ–º–æ–Ω—Ç")
            main_cat = cat.split("/")[0].strip()
            clean_cat = re.sub(r"[^–∞-—è–ê-–Ø]", "", main_cat).strip().lower()
            if clean_cat:
                master_cats.append(clean_cat)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (–≥–∏–±–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        return any(clean_request in mc or mc in clean_request for mc in master_cats)

    rows = [r for r in rows if cat_match(r[6], category)]

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç -> –ø–æ–¥–ø–∏—Å–∫–∞ -> —É—Ä–æ–≤–µ–Ω—å
    def sort_key(r):
        _id, _fio, _contact, _level, pr_until, sub_until, _cats = r
        pr = 1 if is_active(pr_until) else 0
        sub = 1 if is_active(sub_until) else 0
        lvl_rank = {"–¢–û–ü":3, "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π":2, "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π":1, "–ö–∞–Ω–¥–∏–¥–∞—Ç":0}.get(_level,0)
        return (-pr, -sub, -lvl_rank)

    rows = sorted(rows, key=sort_key)[:5]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    request_data = db.fetch_one("""
        SELECT name, description, when_text 
        FROM requests 
        WHERE id = ?
    """, (request_id,))

    if request_data:
        text = (
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {district}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request_data['description']}\n"
            f"üóì –ö–æ–≥–¥–∞: {request_data['when_text']}\n\n"
            f"‚ùóÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è."
        )
    else:
        text = (f"üÜï –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"–ê–¥—Ä–µ—Å: {district}")

    for mid, fio, contact, level, _, _, _ in rows:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ë–µ—Ä—É", callback_data=f"offer:take:{request_id}:{mid}"),
                InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"offer:skip:{request_id}:{mid}")
            ]
        ])
        db.execute("INSERT INTO offers(request_id, master_id, status) VALUES(?,?, 'sent')", (request_id, mid))
        db.commit()
        try:
            chat_id = int(contact)  # –≤ –∞–Ω–∫–µ—Ç–µ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ user_id –º–∞—Å—Ç–µ—Ä–∞ –≤ contact
        except:
            chat_id = ADMIN_CHAT_ID  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try:
            await bot.send_message(chat_id, text, reply_markup=kb)
        except Exception as e:
            error_msg = str(e).lower()
            if "blocked" in error_msg or "bot was blocked" in error_msg or "user is deactivated" in error_msg:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                db.execute("UPDATE masters SET is_active = 0 WHERE id = ?", (mid,))
                logging.info(f"[MASTER_DEACTIVATED] Master #{mid} blocked the bot")
            else:
                logging.warning(f"[MASTER_NOTIFY_ERROR] Master #{mid}: {e}")

# ----------------- TAKE ORDER ----------
@dp.callback_query(F.data.startswith("offer:"))
async def offer_actions(c: CallbackQuery):
    user_id = c.from_user.id
    
    # –õ–∏–º–∏—Ç: 10 –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ —á–∞—Å (–≤–∑—è—Ç—å/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    if not rate_limiter.check_limit(user_id, "offer_actions", 10, 3600):
        await c.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    _, action, req_id, master_id = c.data.split(":")
    req_id, master_id = int(req_id), int(master_id)
    row = db.fetch_one("SELECT status, name, contact FROM requests WHERE id=?", (req_id,))
    if not row:
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    status, client_name, client_contact = row['status'], row['name'], row['contact']

    if action == "skip":
        db.execute("UPDATE offers SET status='skipped' WHERE request_id=? AND master_id=?", (req_id, master_id))
        await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ"); return

    if action == "take":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –Ω–∞–∂–∞–ª –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –º–∞—Å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        current_master = db.fetch_one("SELECT id FROM masters WHERE contact = ?", (str(c.from_user.id),))
        if not current_master or current_master['id'] != master_id:
            await c.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
            return
        
        if status != "new":
            await c.answer("–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–∞—Å—Ç–µ—Ä–æ–º", show_alert=True)
            return

        m = db.fetch_one("SELECT sub_until, free_orders_left FROM masters WHERE id=?", (master_id,))
        if not m:
            await c.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        sub_until, free_left = m['sub_until'], m['free_orders_left']

        allowed = False
        if is_active(sub_until):
            allowed = True
        elif (free_left or 0) > 0:
            allowed = True
            db.execute("UPDATE masters SET free_orders_left=free_orders_left-1 WHERE id=?", (master_id,))
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (990 ‚ÇΩ/–º–µ—Å)", callback_data="pay:sub")]
            ])
            await c.message.reply("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.", reply_markup=kb)
            await c.answer(); return

        db.execute("UPDATE requests SET status='assigned', master_id=? WHERE id=?", (master_id, req_id))

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await c.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –≤–∞–º–∏!")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É
        request_full = db.fetch_one("""
            SELECT name, contact, description, when_text, district, client_user_id 
            FROM requests 
            WHERE id = ?
        """, (req_id,))

        if request_full:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if request_full['client_user_id']:
                master_info = db.fetch_one("SELECT fio, phone FROM masters WHERE id = ?", (master_id,))
                if master_info:
                    master_name = master_info['fio'] or "–ú–∞—Å—Ç–µ—Ä"
                    master_phone = master_info['phone'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
                    try:
                        await bot.send_message(
                            int(request_full['client_user_id']),
                            f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ #{req_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
                            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
                            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {master_phone}\n\n"
                            f"–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                        )
                    except Exception as e:
                        logging.warning(f"[CLIENT_NOTIFY_ERROR] {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä—É
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete:{req_id}")]
            ])
            
            await bot.send_message(
                c.from_user.id,
                f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{req_id}</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_full['name']}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {request_full['contact']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {request_full['district']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request_full['description']}\n"
                f"üóì –ö–æ–≥–¥–∞: {request_full['when_text']}\n\n"
                f"üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
                f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=kb
            )

        db.execute("UPDATE offers SET status='taken' WHERE request_id=? AND master_id=?", (req_id, master_id))
        await notify_admin(f"üîó –ó–∞–∫–∞–∑ #{req_id} –≤–∑—è—Ç –º–∞—Å—Ç–µ—Ä–æ–º #{master_id}. –ö–ª–∏–µ–Ω—Ç: {client_name} | {client_contact}")
        await c.answer()

# ----------------- COMPLAINT FLOW ------
@dp.message(Complaint.who)
async def comp_who(m: Message, state: FSMContext):
    await state.update_data(who=m.text.strip())
    await m.answer("ID –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ) –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:")
    await state.set_state(Complaint.order_id)

@dp.message(Complaint.order_id)
async def comp_order(m: Message, state: FSMContext):
    await state.update_data(order_id=m.text.strip())
    await m.answer("ID –º–∞—Å—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ) –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:")
    await state.set_state(Complaint.master_id)

@dp.message(Complaint.master_id)
async def comp_master(m: Message, state: FSMContext):
    await state.update_data(master_id=m.text.strip())
    await m.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–æ—Ä–æ—Ç–∫–æ:")
    await state.set_state(Complaint.text)

@dp.message(Complaint.text)
async def comp_text(m: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –∂–∞–ª–æ–±—ã"""
    try:
        data = await state.get_data()
        request_id = data.get('review_request_id')
        
        if not request_id:
            # –≠—Ç–æ –Ω–µ –æ—Ç–∑—ã–≤, –∞ –æ–±—ã—á–Ω–∞—è –∂–∞–ª–æ–±–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            d = await state.get_data()
            db.execute("INSERT INTO complaints(who,order_id,master_id,text) VALUES(?,?,?,?)",
                      (d["who"], d["order_id"], d["master_id"], m.text.strip()))
            db.commit()
            await notify_admin(f"üö® –ñ–∞–ª–æ–±–∞: {json.dumps(d, ensure_ascii=False)}")
            await m.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_menu_kb(str(c.from_user.id)))
            await state.clear()
            return
        
        # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        request = db.fetch_one("SELECT master_id FROM requests WHERE id = ?", (request_id,))
        if not request:
            await m.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–º
        db.execute("""
            UPDATE reviews 
            SET comment = ?
            WHERE request_id = ?
        """, (m.text.strip(), request_id))
        
        await m.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤! –û–Ω –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.",
            reply_markup=main_menu_kb(str(c.from_user.id))
        )
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"[REVIEW_TEXT_PROCESS_ERROR] {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
        await state.clear()

# ----------------- BILLING MENU --------
@dp.callback_query(F.data=="go:billing")
async def go_billing(c: CallbackQuery, state: FSMContext):
    await c.message.answer(
        "<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏ —É—Å–ª—É–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤</b>\n\n"
        "üîπ –ù–æ–≤—ã–º –º–∞—Å—Ç–µ—Ä–∞–º: 3 –∑–∞–∫–∞–∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "üîπ –î–∞–ª–µ–µ –ø–æ–¥–ø–∏—Å–∫–∞: 990 ‚ÇΩ/–º–µ—Å (–±–µ–∑–ª–∏–º–∏—Ç)\n\n"
        "–î–æ–ø.—É—Å–ª—É–≥–∏:\n"
        "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–æ–≤ ‚Äî 490 ‚ÇΩ/–º–µ—Å\n"
        "üìå –ó–∞–∫—Ä–µ–ø –∞–Ω–∫–µ—Ç—ã ‚Äî 190 ‚ÇΩ/–Ω–µ–¥\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ 990 ‚ÇΩ", callback_data="pay:sub")],
            [InlineKeyboardButton(text="‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 490 ‚ÇΩ", callback_data="pay:priority")],
            [InlineKeyboardButton(text="üìå –ó–∞–∫—Ä–µ–ø 190 ‚ÇΩ", callback_data="pay:pin")],
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="go:menu")]
        ])
    )
    await c.answer()

# ----------------- MAIN ----------------
async def periodic_cleanup():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:
    - –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    - –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    """
    logging.info("[PERIODIC_CLEANUP] Started periodic cleanup service")
    cleanup_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è rate limiter
    
    full_cleanup_interval = 24 * 3600  # 24 —á–∞—Å–∞
    quick_check_interval = 6 * 3600    # 6 —á–∞—Å–æ–≤
    
    while True:
        try:
            # –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –≤–∏—Å—è—â–∏—Ö –≤ "pending_confirmation" –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
            try:
                pending_requests = db.fetch_all("""
                    SELECT id, master_id, client_user_id
                    FROM requests 
                    WHERE status = 'pending_confirmation'
                      AND datetime(created_at) < datetime('now', '-24 hours')
                """)
            
                for req in pending_requests:
                    request_id = req['id']
                
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
                    await mark_request_completed(request_id)
                
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                    if req['client_user_id']:
                        try:
                            await bot.send_message(
                                int(req['client_user_id']),
                                f"‚è∞ –ó–∞–∫–∞–∑ #{request_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n"
                                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–∞—Å—Ç–µ—Ä–∞:"
                            )
                        except Exception as e:
                            logging.error(f"[AUTO_COMPLETE_NOTIFY_ERROR] {e}")
                
                    logging.info(f"[AUTO_COMPLETE] Request #{request_id} auto-completed after 24h")
            
                if pending_requests:
                    logging.info(f"[AUTO_COMPLETE] Completed {len(pending_requests)} pending requests")
                
            except Exception as e:
                logging.error(f"[AUTO_COMPLETE_ERROR] {e}")

            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            await safe_cleanup_documents()
            logging.info(f"[PERIODIC_CLEANUP] Full cleanup completed. Next in {full_cleanup_interval/3600} hours")
            
            # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            # –ù–æ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            for i in range(4):  # 24 / 6 = 4 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                await asyncio.sleep(quick_check_interval)
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                pending_count = db.fetch_one("""
                    SELECT COUNT(*) as count 
                    FROM masters 
                    WHERE created_at < datetime('now', '-72 hours')
                      AND (passport_scan_file_id IS NOT NULL 
                           OR face_photo_file_id IS NOT NULL 
                           OR npd_ip_doc_file_id IS NOT NULL)
                """)['count']
                
                if pending_count > 0:
                    logging.info(f"[CLEANUP_STATUS] Documents pending cleanup: {pending_count}")
                else:
                    logging.info("[CLEANUP_STATUS] No documents pending cleanup")
                
                # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ —á–∏—Å—Ç–∏–º rate limiter
                cleanup_counter += 1
                if cleanup_counter >= 4:  # 4 * 6 —á–∞—Å–æ–≤ = 24 —á–∞—Å–∞
                    rate_limiter.cleanup_old_entries()
                    cleanup_counter = 0
                    
        except Exception as e:
            logging.error(f"[PERIODIC_CLEANUP_ERROR] {e}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 1 —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(3600)

async def main():
    # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("[BOT] Webhook deleted")
    except Exception as e:
        logging.warning(f"[DEL_WEBHOOK] {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (v3, —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é)")
        except Exception as e:
            logging.error(f"[ADMIN_NOTIFY_ERROR] {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
    asyncio.create_task(periodic_cleanup())
    logging.info("[BOT] Background tasks started")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("[BOT] Starting polling...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"[BOT_ERROR] {e}")
    finally:
        db.close()
        logging.info("[BOT] Stopped")

if __name__ == "__main__":
    asyncio.run(main())